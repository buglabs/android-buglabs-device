diff --git a/arch/arm/mach-tegra/include/mach/usb_phy.h b/arch/arm/mach-tegra/include/mach/usb_phy.h
index 8b4beae..c315cab 100644
--- a/arch/arm/mach-tegra/include/mach/usb_phy.h
+++ b/arch/arm/mach-tegra/include/mach/usb_phy.h
@@ -32,9 +32,25 @@ struct tegra_utmip_config {
 	u8 xcvr_lsrslew;
 };
 
+enum tegra_ulpi_inf_type {
+        TEGRA_USB_LINK_ULPI = 0,
+        TEGRA_USB_NULL_ULPI,
+};
+
+struct tegra_ulpi_trimmer {
+	u8 shadow_clk_delay;	/* 0 ~ 31 */
+	u8 clock_out_delay;	/* 0 ~ 31 */
+	u8 data_trimmer;	/* 0 ~ 7 */
+	u8 stpdirnxt_trimmer;	/* 0 ~ 7 */
+};
+
 struct tegra_ulpi_config {
+	enum tegra_ulpi_inf_type inf_type;
 	int reset_gpio;
 	const char *clk;
+	const struct tegra_ulpi_trimmer *trimmer;
+	int (*preinit)(void);
+	int (*postinit)(void);
 };
 
 enum tegra_usb_phy_port_speed {
@@ -83,6 +99,11 @@ int tegra_usb_phy_preresume(struct tegra_usb_phy *phy);
 
 int tegra_usb_phy_postresume(struct tegra_usb_phy *phy);
 
+int tegra_ehci_phy_restore_start(struct tegra_usb_phy *phy,
+				 enum tegra_usb_phy_port_speed port_speed);
+
+int tegra_ehci_phy_restore_end(struct tegra_usb_phy *phy);
+
 int tegra_usb_phy_close(struct tegra_usb_phy *phy);
 
 #endif //__MACH_USB_PHY_H
diff --git a/arch/arm/mach-tegra/usb_phy.c b/arch/arm/mach-tegra/usb_phy.c
index e7929ae..9e80925 100644
--- a/arch/arm/mach-tegra/usb_phy.c
+++ b/arch/arm/mach-tegra/usb_phy.c
@@ -78,9 +78,28 @@
 #define   USB1_VBUS_SENSE_CTL_AB_SESS_VLD	(2 << 1)
 #define   USB1_VBUS_SENSE_CTL_A_SESS_VLD	(3 << 1)
 
+#define ULPIS2S_CTRL		0x418
+#define   ULPIS2S_ENA			(1 << 0)
+#define   ULPIS2S_SUPPORT_DISCONNECT	(1 << 2)
+#define   ULPIS2S_PLLU_MASTER_BLASTER60	(1 << 3)
+#define   ULPIS2S_SPARE(x)		(((x) & 0xF) << 8)
+#define   ULPIS2S_FORCE_ULPI_CLK_OUT	(1 << 12)
+#define   ULPIS2S_DISCON_DONT_CHECK_SE0	(1 << 13)
+#define   ULPIS2S_SUPPORT_HS_KEEP_ALIVE (1 << 14)
+#define   ULPIS2S_DISABLE_STP_PU	(1 << 15)
+
 #define ULPI_TIMING_CTRL_0	0x424
+#define   ULPI_CLOCK_OUT_DELAY(x)	((x) & 0x1F)
 #define   ULPI_OUTPUT_PINMUX_BYP	(1 << 10)
 #define   ULPI_CLKOUT_PINMUX_BYP	(1 << 11)
+#define   ULPI_SHADOW_CLK_LOOPBACK_EN	(1 << 12)
+#define   ULPI_SHADOW_CLK_SEL		(1 << 13)
+#define   ULPI_CORE_CLK_SEL		(1 << 14)
+#define   ULPI_SHADOW_CLK_DELAY(x)	(((x) & 0x1F) << 16)
+#define   ULPI_LBK_PAD_EN		(1 << 26)
+#define   ULPI_LBK_PAD_E_INPUT_OR	(1 << 27)
+#define   ULPI_CLK_OUT_ENA		(1 << 28)
+#define   ULPI_CLK_PADOUT_ENA		(1 << 29)
 
 #define ULPI_TIMING_CTRL_1	0x428
 #define   ULPI_DATA_TRIMMER_LOAD	(1 << 0)
@@ -119,6 +138,12 @@
 #define   UTMIP_HS_DISCON_DISABLE	(1 << 8)
 
 #define UTMIP_MISC_CFG0		0x824
+#define   UTMIP_DPDM_OBSERVE		(1 << 26)
+#define   UTMIP_DPDM_OBSERVE_SEL(x)	(((x) & 0xf) << 27)
+#define   UTMIP_DPDM_OBSERVE_SEL_FS_J	UTMIP_DPDM_OBSERVE_SEL(0xf)
+#define   UTMIP_DPDM_OBSERVE_SEL_FS_K	UTMIP_DPDM_OBSERVE_SEL(0xe)
+#define   UTMIP_DPDM_OBSERVE_SEL_FS_SE1 UTMIP_DPDM_OBSERVE_SEL(0xd)
+#define   UTMIP_DPDM_OBSERVE_SEL_FS_SE0 UTMIP_DPDM_OBSERVE_SEL(0xc)
 #define   UTMIP_SUSPEND_EXIT_ON_EDGE	(1 << 22)
 
 #define UTMIP_MISC_CFG1		0x828
@@ -132,7 +157,7 @@
 #define   UTMIP_PD_CHRG			(1 << 0)
 
 #define UTMIP_SPARE_CFG0	0x834
-#define   FUSE_SETUP_SEL		(1 << 3);
+#define   FUSE_SETUP_SEL		(1 << 3)
 
 #define UTMIP_XCVR_CFG1		0x838
 #define   UTMIP_FORCE_PDDISC_POWERDOWN	(1 << 0)
@@ -417,6 +442,15 @@ static void utmi_phy_power_on(struct tegra_usb_phy *phy)
 	val |= UTMIP_BIAS_PDTRK_COUNT(0x5);
 	writel(val, base + UTMIP_BIAS_CFG1);
 
+	if (phy->instance == 0) {
+		val = readl(base + UTMIP_SPARE_CFG0);
+		if (phy->mode == TEGRA_USB_PHY_MODE_DEVICE)
+			val &= ~FUSE_SETUP_SEL;
+		else
+			val |= FUSE_SETUP_SEL;
+		writel(val, base + UTMIP_SPARE_CFG0);
+	}
+
 	if (phy->instance == 2) {
 		val = readl(base + USB_SUSP_CTRL);
 		val |= UTMIP_PHY_ENABLE;
@@ -522,6 +556,38 @@ static void utmi_phy_postresume(struct tegra_usb_phy *phy)
 	writel(val, base + UTMIP_TX_CFG0);
 }
 
+static void utmi_phy_restore_start(struct tegra_usb_phy *phy,
+				   enum tegra_usb_phy_port_speed port_speed)
+{
+	unsigned long val;
+	void __iomem *base = phy->regs;
+
+	val = readl(base + UTMIP_MISC_CFG0);
+	val &= ~UTMIP_DPDM_OBSERVE_SEL(~0);
+	if (port_speed == TEGRA_USB_PHY_PORT_SPEED_LOW)
+		val |= UTMIP_DPDM_OBSERVE_SEL_FS_K;
+	else
+		val |= UTMIP_DPDM_OBSERVE_SEL_FS_J;
+	writel(val, base + UTMIP_MISC_CFG0);
+	udelay(1);
+
+	val = readl(base + UTMIP_MISC_CFG0);
+	val |= UTMIP_DPDM_OBSERVE;
+	writel(val, base + UTMIP_MISC_CFG0);
+	udelay(10);
+}
+
+static void utmi_phy_restore_end(struct tegra_usb_phy *phy)
+{
+	unsigned long val;
+	void __iomem *base = phy->regs;
+
+	val = readl(base + UTMIP_MISC_CFG0);
+	val &= ~UTMIP_DPDM_OBSERVE;
+	writel(val, base + UTMIP_MISC_CFG0);
+	udelay(10);
+}
+
 static void ulpi_viewport_write(struct tegra_usb_phy *phy, u8 addr, u8 data)
 {
 	unsigned long val;
@@ -617,6 +683,108 @@ static void ulpi_phy_power_off(struct tegra_usb_phy *phy)
 	clk_disable(phy->clk);
 }
 
+static void null_phy_power_on(struct tegra_usb_phy *phy)
+{
+	const struct tegra_ulpi_trimmer default_trimmer = {0, 0, 4, 4};
+	unsigned long val;
+	void __iomem *base = phy->regs;
+	struct tegra_ulpi_config *config = phy->config;
+
+	if (config->preinit)
+		config->preinit();
+
+	if (!config->trimmer)
+		config->trimmer = &default_trimmer;
+
+	val = readl(base + USB_SUSP_CTRL);
+	val |= UHSIC_RESET;
+	writel(val, base + USB_SUSP_CTRL);
+
+	val = readl(base + ULPI_TIMING_CTRL_0);
+	val |= ULPI_OUTPUT_PINMUX_BYP | ULPI_CLKOUT_PINMUX_BYP;
+	writel(val, base + ULPI_TIMING_CTRL_0);
+
+	val = readl(base + USB_SUSP_CTRL);
+	val |= ULPI_PHY_ENABLE;
+	writel(val, base + USB_SUSP_CTRL);
+
+	/* set timming parameters */
+	val = readl(base + ULPI_TIMING_CTRL_0);
+	val |= ULPI_SHADOW_CLK_LOOPBACK_EN;
+	val |= ULPI_SHADOW_CLK_SEL;
+	val |= ULPI_OUTPUT_PINMUX_BYP;
+	val |= ULPI_CLKOUT_PINMUX_BYP;
+	val |= ULPI_LBK_PAD_EN;
+	val |= ULPI_SHADOW_CLK_DELAY(config->trimmer->shadow_clk_delay);
+	val |= ULPI_CLOCK_OUT_DELAY(config->trimmer->clock_out_delay);
+	val |= ULPI_LBK_PAD_E_INPUT_OR;
+	writel(val, base + ULPI_TIMING_CTRL_0);
+
+	val = 0;
+	writel(val, base + ULPI_TIMING_CTRL_1);
+	udelay(10);
+
+	/* enable null phy mode */
+	val = ULPIS2S_ENA;
+	val |= ULPIS2S_PLLU_MASTER_BLASTER60;
+	val |= ULPIS2S_SPARE((phy->mode == TEGRA_USB_PHY_MODE_HOST)? 3:1);
+	writel(val, base + ULPIS2S_CTRL);
+
+	/* select ULPI_CORE_CLK_SEL to SHADOW_CLK */
+	val = readl(base + ULPI_TIMING_CTRL_0);
+	val |= ULPI_CORE_CLK_SEL;
+	writel(val, base + ULPI_TIMING_CTRL_0);
+	udelay(10);
+
+	/* enable ULPI null clocks - can't set the trimmers before this */
+	val = readl(base + ULPI_TIMING_CTRL_0);
+	val |= ULPI_CLK_OUT_ENA;
+	writel(val, base + ULPI_TIMING_CTRL_0);
+	udelay(10);
+
+	val = ULPI_DATA_TRIMMER_SEL(config->trimmer->data_trimmer);
+	val |= ULPI_STPDIRNXT_TRIMMER_SEL(config->trimmer->stpdirnxt_trimmer);
+	val |= ULPI_DIR_TRIMMER_SEL(4);
+	writel(val, base + ULPI_TIMING_CTRL_1);
+	udelay(10);
+
+	val |= ULPI_DATA_TRIMMER_LOAD;
+	val |= ULPI_STPDIRNXT_TRIMMER_LOAD;
+	val |= ULPI_DIR_TRIMMER_LOAD;
+	writel(val, base + ULPI_TIMING_CTRL_1);
+
+	val = readl(base + ULPI_TIMING_CTRL_0);
+	val |= ULPI_CLK_PADOUT_ENA;
+	writel(val, base + ULPI_TIMING_CTRL_0);
+	udelay(10);
+
+	val = readl(base + USB_SUSP_CTRL);
+	val |= USB_SUSP_CLR;
+	writel(val, base + USB_SUSP_CTRL);
+	udelay(100);
+
+	val = readl(base + USB_SUSP_CTRL);
+	val &= ~USB_SUSP_CLR;
+	writel(val, base + USB_SUSP_CTRL);
+
+	if (utmi_wait_register(base + USB_SUSP_CTRL, USB_PHY_CLK_VALID,
+						     USB_PHY_CLK_VALID))
+		pr_err("%s: timeout waiting for phy to stabilize\n", __func__);
+
+	if (config->postinit)
+		config->postinit();
+}
+
+static void null_phy_power_off(struct tegra_usb_phy *phy)
+{
+	unsigned long val;
+	void __iomem *base = phy->regs;
+
+	val = readl(base + ULPI_TIMING_CTRL_0);
+	val &= ~ULPI_CLK_PADOUT_ENA;
+	writel(val, base + ULPI_TIMING_CTRL_0);
+}
+
 struct tegra_usb_phy *tegra_usb_phy_open(int instance, void __iomem *regs,
 			void *config, enum tegra_usb_phy_mode phy_mode)
 {
@@ -633,7 +801,6 @@ struct tegra_usb_phy *tegra_usb_phy_open(int instance, void __iomem *regs,
 	phy->instance = instance;
 	phy->regs = regs;
 	phy->config = config;
-	phy->context.valid = false;
 	phy->mode = phy_mode;
 
 	if (!phy->config) {
@@ -668,15 +835,18 @@ struct tegra_usb_phy *tegra_usb_phy_open(int instance, void __iomem *regs,
 
 	if (phy->instance == 1) {
 		ulpi_config = config;
-		phy->clk = clk_get_sys(NULL, ulpi_config->clk);
-		if (IS_ERR(phy->clk)) {
-			pr_err("%s: can't get ulpi clock\n", __func__);
-			err = -ENXIO;
-			goto err1;
+
+		if (ulpi_config->inf_type == TEGRA_USB_LINK_ULPI) {
+			phy->clk = clk_get_sys(NULL, ulpi_config->clk);
+			if (IS_ERR(phy->clk)) {
+				pr_err("%s: can't get ulpi clock\n", __func__);
+				err = -ENXIO;
+				goto err1;
+			}
+			tegra_gpio_enable(ulpi_config->reset_gpio);
+			gpio_request(ulpi_config->reset_gpio, "ulpi_phy_reset_b");
+			gpio_direction_output(ulpi_config->reset_gpio, 0);
 		}
-		tegra_gpio_enable(ulpi_config->reset_gpio);
-		gpio_request(ulpi_config->reset_gpio, "ulpi_phy_reset_b");
-		gpio_direction_output(ulpi_config->reset_gpio, 0);
 	} else {
 		err = utmip_pad_open(phy);
 		if (err < 0)
@@ -695,9 +865,14 @@ err0:
 
 int tegra_usb_phy_power_on(struct tegra_usb_phy *phy)
 {
-	if (phy->instance == 1)
-		ulpi_phy_power_on(phy);
-	else
+	if (phy->instance == 1) {
+		struct tegra_ulpi_config *ulpi_config = phy->config;
+
+		if (ulpi_config->inf_type == TEGRA_USB_LINK_ULPI)
+			ulpi_phy_power_on(phy);
+		else
+			null_phy_power_on(phy);
+	} else
 		utmi_phy_power_on(phy);
 
 	return 0;
@@ -705,9 +880,14 @@ int tegra_usb_phy_power_on(struct tegra_usb_phy *phy)
 
 int tegra_usb_phy_power_off(struct tegra_usb_phy *phy)
 {
-	if (phy->instance == 1)
-		ulpi_phy_power_off(phy);
-	else
+	if (phy->instance == 1) {
+		struct tegra_ulpi_config *ulpi_config = phy->config;
+
+		if (ulpi_config->inf_type == TEGRA_USB_LINK_ULPI)
+			ulpi_phy_power_off(phy);
+		else
+			null_phy_power_off(phy);
+	} else
 		utmi_phy_power_off(phy);
 
 	return 0;
@@ -715,18 +895,33 @@ int tegra_usb_phy_power_off(struct tegra_usb_phy *phy)
 
 int tegra_usb_phy_preresume(struct tegra_usb_phy *phy)
 {
-	if (phy->instance == 2)
+	if (phy->instance != 1)
 		utmi_phy_preresume(phy);
 	return 0;
 }
 
 int tegra_usb_phy_postresume(struct tegra_usb_phy *phy)
 {
-	if (phy->instance == 2)
+	if (phy->instance != 1)
 		utmi_phy_postresume(phy);
 	return 0;
 }
 
+int tegra_ehci_phy_restore_start(struct tegra_usb_phy *phy,
+				 enum tegra_usb_phy_port_speed port_speed)
+{
+	if (phy->instance != 1)
+		utmi_phy_restore_start(phy, port_speed);
+	return 0;
+}
+
+int tegra_ehci_phy_restore_end(struct tegra_usb_phy *phy)
+{
+	if (phy->instance != 1)
+		utmi_phy_restore_end(phy);
+	return 0;
+}
+
 int tegra_usb_phy_clk_disable(struct tegra_usb_phy *phy)
 {
 	if (phy->instance != 1)
@@ -745,9 +940,12 @@ int tegra_usb_phy_clk_enable(struct tegra_usb_phy *phy)
 
 int tegra_usb_phy_close(struct tegra_usb_phy *phy)
 {
-	if (phy->instance == 1)
-		clk_put(phy->clk);
-	else
+	if (phy->instance == 1) {
+		struct tegra_ulpi_config *ulpi_config = phy->config;
+
+		if (ulpi_config->inf_type == TEGRA_USB_LINK_ULPI)
+			clk_put(phy->clk);
+	} else
 		utmip_pad_close(phy);
 	clk_disable(phy->pll_u);
 	clk_put(phy->pll_u);
diff --git a/drivers/usb/host/ehci-tegra.c b/drivers/usb/host/ehci-tegra.c
index 80dad87..5765496 100644
--- a/drivers/usb/host/ehci-tegra.c
+++ b/drivers/usb/host/ehci-tegra.c
@@ -39,7 +39,6 @@
 struct tegra_ehci_context {
 	bool valid;
 	u32 command;
-	u32 intr_enable;
 	u32 frame_list;
 	u32 async_next;
 	u32 txfilltunning;
@@ -51,6 +50,7 @@ struct tegra_ehci_hcd {
 	struct ehci_hcd *ehci;
 	struct tegra_usb_phy *phy;
 	struct clk *clk;
+	struct clk *emc_clk;
 	struct otg_transceiver *transceiver;
 	int host_resumed;
 	int bus_suspended;
@@ -63,6 +63,7 @@ static void tegra_ehci_power_up(struct usb_hcd *hcd)
 {
 	struct tegra_ehci_hcd *tegra = dev_get_drvdata(hcd->self.controller);
 
+	clk_enable(tegra->emc_clk);
 	clk_enable(tegra->clk);
 	tegra_usb_phy_power_on(tegra->phy);
 	tegra->host_resumed = 1;
@@ -75,6 +76,7 @@ static void tegra_ehci_power_down(struct usb_hcd *hcd)
 	tegra->host_resumed = 0;
 	tegra_usb_phy_power_off(tegra->phy);
 	clk_disable(tegra->clk);
+	clk_disable(tegra->emc_clk);
 }
 
 static int tegra_ehci_hub_control(
@@ -134,6 +136,7 @@ static int tegra_ehci_hub_control(
 		if (handshake(ehci, status_reg, PORT_SUSPEND,
 						PORT_SUSPEND, 5000))
 			pr_err("%s: timeout waiting for PORT_SUSPEND\n", __func__);
+		set_bit((wIndex & 0xff) - 1, &ehci->suspended_ports);
 		goto done;
 	}
 
@@ -156,11 +159,7 @@ static int tegra_ehci_hub_control(
 
 		tegra_usb_phy_preresume(tegra->phy);
 
-		/* reschedule root hub polling during resume signaling */
 		ehci->reset_done[wIndex-1] = jiffies + msecs_to_jiffies(25);
-		/* check the port again */
-		mod_timer(&ehci_to_hcd(ehci)->rh_timer,
-				ehci->reset_done[wIndex-1]);
 
 		temp &= ~(PORT_RWC_BITS | PORT_WAKE_BITS);
 		/* start resume signalling */
@@ -178,6 +177,8 @@ static int tegra_ehci_hub_control(
 		if (handshake(ehci, status_reg, PORT_SUSPEND, 0, 2000))
 			pr_err("%s: timeout waiting for PORT_SUSPEND\n", __func__);
 
+		ehci->reset_done[wIndex-1] = 0;
+
 		tegra->port_resuming = 1;
 		goto done;
 	}
@@ -215,14 +216,10 @@ static void tegra_ehci_restart(struct usb_hcd *hcd)
 	ehci_writel(ehci, ehci->command, &ehci->regs->command);
 
 	down_write(&ehci_cf_port_reset_rwsem);
-	hcd->state = HC_STATE_RUNNING;
 	ehci_writel(ehci, FLAG_CF, &ehci->regs->configured_flag);
 	/* flush posted writes */
 	ehci_readl(ehci, &ehci->regs->command);
 	up_write(&ehci_cf_port_reset_rwsem);
-
-	/* Turn On Interrupts */
-	ehci_writel(ehci, INTR_MASK, &ehci->regs->intr_enable);
 }
 
 static int tegra_usb_suspend(struct usb_hcd *hcd)
@@ -242,7 +239,6 @@ static int tegra_usb_suspend(struct usb_hcd *hcd)
 		context->valid = false;
 	} else {
 		context->command	= readl(&hw->command);
-		context->intr_enable	= readl(&hw->intr_enable);
 		context->frame_list	= readl(&hw->frame_list);
 		context->async_next	= readl(&hw->async_next);
 		context->txfilltunning	= readl(&hw->reserved[2]);
@@ -265,12 +261,24 @@ static int tegra_usb_resume(struct usb_hcd *hcd)
 	struct tegra_ehci_context *context = &tegra->context;
 	struct ehci_regs __iomem *hw = tegra->ehci->regs;
 	unsigned long val;
+	int lp0_resume = 0;
 
 	set_bit(HCD_FLAG_HW_ACCESSIBLE, &hcd->flags);
 	tegra_ehci_power_up(ehci_to_hcd(tegra->ehci));
 
-	if (!context->valid)
+	if (!context->valid) {
+		/* Wait for the phy to detect new devices
+		 * before we restart the controller */
+		msleep(10);
 		goto restart;
+	}
+
+	tegra_ehci_phy_restore_start(tegra->phy, context->port_speed);
+
+	/* Check if the phy resume from LP0. When the phy resume from LP0
+	 * USB register will be reset. */
+	if (!readl(&hw->async_next))
+		lp0_resume = 1;
 
 	/* Restore register context */
 	writel(TEGRA_USB_USBMODE_HOST, &hw->reserved[19]);
@@ -286,17 +294,19 @@ static int tegra_usb_resume(struct usb_hcd *hcd)
 	writel(val, &hw->port_status[0]);
 	udelay(10);
 
-	/* Program the field PTC in PORTSC based on the saved speed mode */
-	val = readl(&hw->port_status[0]);
-	val &= ~(TEGRA_USB_PORTSC1_PTC(~0));
-	if (context->port_speed == TEGRA_USB_PHY_PORT_HIGH)
-		val |= TEGRA_USB_PORTSC1_PTC(5);
-	else if (context->port_speed == TEGRA_USB_PHY_PORT_SPEED_FULL)
-		val |= TEGRA_USB_PORTSC1_PTC(6);
-	else if (context->port_speed == TEGRA_USB_PHY_PORT_SPEED_LOW)
-		val |= TEGRA_USB_PORTSC1_PTC(7);
-	writel(val, &hw->port_status[0]);
-	udelay(10);
+	if (lp0_resume) {
+		/* Program the field PTC in PORTSC based on the saved speed mode */
+		val = readl(&hw->port_status[0]);
+		val &= ~(TEGRA_USB_PORTSC1_PTC(~0));
+		if (context->port_speed == TEGRA_USB_PHY_PORT_HIGH)
+			val |= TEGRA_USB_PORTSC1_PTC(5);
+		else if (context->port_speed == TEGRA_USB_PHY_PORT_SPEED_FULL)
+			val |= TEGRA_USB_PORTSC1_PTC(6);
+		else if (context->port_speed == TEGRA_USB_PHY_PORT_SPEED_LOW)
+			val |= TEGRA_USB_PORTSC1_PTC(7);
+		writel(val, &hw->port_status[0]);
+		udelay(10);
+	}
 
 	/* Disable test mode by setting PTC field to NORMAL_OP */
 	val = readl(&hw->port_status[0]);
@@ -338,13 +348,14 @@ static int tegra_usb_resume(struct usb_hcd *hcd)
 		}
 	}
 
-	/* Restore interrupt register */
-	writel(context->intr_enable, &hw->intr_enable);
-	udelay(10);
+	tegra_ehci_phy_restore_end(tegra->phy);
 
 	return 0;
 
 restart:
+	if (context->valid)
+		tegra_ehci_phy_restore_end(tegra->phy);
+
 	tegra_ehci_restart(hcd);
 	return 0;
 }
@@ -626,6 +637,16 @@ static int tegra_ehci_probe(struct platform_device *pdev)
 	if (err)
 		goto fail_clken;
 
+	tegra->emc_clk = clk_get(&pdev->dev, "emc");
+	if (IS_ERR(tegra->emc_clk)) {
+		dev_err(&pdev->dev, "Can't get emc clock\n");
+		err = PTR_ERR(tegra->emc_clk);
+		goto fail_emc_clk;
+	}
+
+	clk_enable(tegra->emc_clk);
+	clk_set_rate(tegra->emc_clk, 400000000);
+
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "Failed to get I/O memory\n");
@@ -700,6 +721,9 @@ fail:
 fail_phy:
 	iounmap(hcd->regs);
 fail_io:
+	clk_disable(tegra->emc_clk);
+	clk_put(tegra->emc_clk);
+fail_emc_clk:
 	clk_disable(tegra->clk);
 fail_clken:
 	clk_put(tegra->clk);
@@ -764,6 +788,9 @@ static int tegra_ehci_remove(struct platform_device *pdev)
 	clk_disable(tegra->clk);
 	clk_put(tegra->clk);
 
+	clk_disable(tegra->emc_clk);
+	clk_put(tegra->emc_clk);
+
 	kfree(tegra);
 	return 0;
 }
diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index e0ec1a2..6627a95 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -1677,6 +1677,7 @@ static void xhci_add_in_port(struct xhci_hcd *xhci, unsigned int num_ports,
 				xhci->port_array[i] = (u8) -1;
 			}
 			/* FIXME: Should we disable the port? */
+			continue;
 		}
 		xhci->port_array[i] = major_revision;
 		if (major_revision == 0x03)
@@ -1755,16 +1756,20 @@ static int xhci_setup_port_arrays(struct xhci_hcd *xhci, gfp_t flags)
 			return -ENOMEM;
 
 		port_index = 0;
-		for (i = 0; i < num_ports; i++)
-			if (xhci->port_array[i] != 0x03) {
-				xhci->usb2_ports[port_index] =
-					&xhci->op_regs->port_status_base +
-					NUM_PORT_REGS*i;
-				xhci_dbg(xhci, "USB 2.0 port at index %u, "
-						"addr = %p\n", i,
-						xhci->usb2_ports[port_index]);
-				port_index++;
-			}
+		for (i = 0; i < num_ports; i++) {
+			if (xhci->port_array[i] == 0x03 ||
+					xhci->port_array[i] == 0 ||
+					xhci->port_array[i] == -1)
+				continue;
+
+			xhci->usb2_ports[port_index] =
+				&xhci->op_regs->port_status_base +
+				NUM_PORT_REGS*i;
+			xhci_dbg(xhci, "USB 2.0 port at index %u, "
+					"addr = %p\n", i,
+					xhci->usb2_ports[port_index]);
+			port_index++;
+		}
 	}
 	if (xhci->num_usb3_ports) {
 		xhci->usb3_ports = kmalloc(sizeof(*xhci->usb3_ports)*
